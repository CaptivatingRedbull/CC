apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-{{ .Values.backend.name }}"
  labels:
    app.kubernetes.io/name: {{ .Values.backend.name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.backend.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.backend.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        rollme: {{ .Values.image.tag | quote }}
    spec:
      initContainers:
      - name: wait-for-postgres-and-data
        image: "{{ .Values.image.registry }}/{{ .Values.image.cache }}/library/postgres:{{ .Values.postgresHa.image.tag }}"
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for PostgreSQL to be ready..."
            until pg_isready -h {{ .Release.Name }}-postgres-ha-service -p 5432 -U {{ .Values.postgresHa.secret.dbUsername }}; do
              echo "PostgreSQL is not ready yet. Waiting..."
              sleep 2
            done
            echo "PostgreSQL is ready!"
            {{- if .Values.dataInit.enabled }}
            echo "Data initialization is enabled. Checking if data has been initialized..."
            # Give the data init job some time to start and populate data
            echo "Waiting for data initialization to complete..."
            TIMEOUT=300  # 5 minutes timeout
            ELAPSED=0
            while [ $ELAPSED -lt $TIMEOUT ]; do
              # Check if contents table exists and has data
              CONTENT_COUNT=$(psql -h {{ .Release.Name }}-postgres-ha-service -p 5432 -U {{ .Values.postgresHa.secret.dbUsername }} -d {{ .Values.postgresHa.dbName }} -t -c "SELECT COUNT(*) FROM contents;" 2>/dev/null | tr -d ' ' || echo "0")
              if [ "$CONTENT_COUNT" -gt "0" ]; then
                echo "Found $CONTENT_COUNT content items in database. Data initialization completed!"
                break
              else
                echo "Database is empty or data initialization not completed yet. Waiting 10 seconds... (elapsed: ${ELAPSED}s)"
                sleep 10
                ELAPSED=$((ELAPSED + 10))
              fi
            done
            
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Timeout waiting for data initialization. Proceeding anyway..."
            fi
            {{- else }}
            echo "Data initialization disabled. Checking if data exists..."
            CONTENT_COUNT=$(psql -h {{ .Release.Name }}-postgres-ha-service -p 5432 -U {{ .Values.postgresHa.secret.dbUsername }} -d {{ .Values.postgresHa.dbName }} -t -c "SELECT COUNT(*) FROM contents;" 2>/dev/null | tr -d ' ' || echo "0")
            if [ "$CONTENT_COUNT" -gt "0" ]; then
              echo "Found $CONTENT_COUNT content items in database. Proceeding..."
            else
              echo "Warning: No content found in database. Backend will start but may show empty content until data is initialized."
            fi
            {{- end }}
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-backend-secret
              key: SPRING_DATASOURCE_PASSWORD
      containers:
      - name: {{ .Values.backend.name }}
        image: "{{ .Values.image.registry }}/{{ .Values.image.project }}/{{ .Values.backend.image.name }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: {{ .Values.backend.service.port }}
        - containerPort: {{ .Values.backend.probes.managementPort }}
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-backend-config
        - secretRef:
            name: {{ .Release.Name }}-backend-secret
        resources:
          {{- toYaml .Values.backend.resources | nindent 10 }}
        readinessProbe:
          httpGet:
            path: {{ .Values.backend.probes.readiness.path }}
            port: {{ .Values.backend.probes.managementPort }}
          initialDelaySeconds: {{ .Values.backend.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.backend.probes.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.backend.probes.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.backend.probes.readiness.failureThreshold }}
        livenessProbe:
          httpGet:
            path: {{ .Values.backend.probes.liveness.path }}
            port: {{ .Values.backend.probes.managementPort }}
          initialDelaySeconds: {{ .Values.backend.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.backend.probes.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.backend.probes.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.backend.probes.liveness.failureThreshold }}